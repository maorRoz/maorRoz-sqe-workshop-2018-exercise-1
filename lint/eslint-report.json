[{"filePath":"/Users/maorrozevich/Documents/sqhw1/src/js/app.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"/Users/maorrozevich/Documents/sqhw1/src/js/code-analyzer.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"/Users/maorrozevich/Documents/sqhw1/src/js/controller/elementsTableController.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'assignmentExpression' is assigned a value but never used.","line":11,"column":7,"nodeType":"Identifier","endLine":11,"endColumn":27},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":54,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":54,"endColumn":16},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":66,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":66,"endColumn":16},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":84,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":84,"endColumn":16},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":103,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":103,"endColumn":16}],"errorCount":5,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import FunctionLine from '../model/FunctionLine.js';\nimport ElementsTable from '../model/ElementsTable.js';\nimport ParamLine from '../model/ParamLine.js';\nimport AssignmentLine from '../model/AssignmentLine.js';\nimport * as ElementsTableUI from '../view/elementsTableUI';\nimport VariableLine from '../model/VariableLine';\n\nlet ElementsTableModel;\n\n\nconst assignmentExpression = (expression) => {\n    const {operator} = expression;\n    if(operator !== '='){\n        return;\n    }\n    const { left , right } = expression;\n    const { name } = left;\n    const { value } = right; \n    ElementsTableModel.setVariable(name,value);\n};\n\nconst expressionStatementTabler = (expressionStatement) => {\n    const { expression } = expressionStatement;\n    const { type } = expression;\n    if(type === 'AssignmentExpression'){\n        //      assignmentExpression(expression);\n    }\n};\n\nconst whileStatementTabler = (lineNum, whileStatement) => {\n    expressionBodyTabler(lineNum,whileStatement.body);\n};\n\nconst alternateTabler = (alternate) => {\n    const lineNum = ElementsTableModel.CurrentLineNum;\n    expressionBodyTabler(lineNum,alternate);\n};\n\nconst ifStatementTabler = (lineNum, ifStatement) => {\n    const { alternate, consequent} = ifStatement;\n    expressionBodyTabler(lineNum , consequent);\n    alternateTabler(alternate);\n};\n\nconst variableDeclaratorTabler = (lineNum, declarationsContainer) => {\n    const { declarations } = declarationsContainer;\n    for(let i = 0; i < declarations.length; i++){\n        const variableLine = new VariableLine(lineNum, declarations[i]);\n        ElementsTableModel.addRow(variableLine);\n    }\n};\n\nconst expressionBodyTabler = (lineNum, objectStatements) => {\n    console.log(objectStatements);\n    const { type, body } = objectStatements;\n    if(type !== 'BlockStatement'){\n        return lineTabler(lineNum +1, objectStatements);\n    }\n    for(let i = 0; i < body.length; i++){\n        lineTabler(lineNum + 1, body[i]);\n    }\n};\n\n\nconst functionParamTabler = (lineNum, param) => {\n    console.log(param);\n    const { type } = param;\n    const functionParamLine = type === 'AssignmentPattern' ? new AssignmentLine(lineNum, param) : new ParamLine(lineNum, param);\n    ElementsTableModel.addRow(functionParamLine);\n};\n\nconst functionTabler = (lineNum,functionObject) => {\n    const functionLine = new FunctionLine(lineNum,functionObject);\n    ElementsTableModel.addRow(functionLine);\n    const { params, body } = functionObject;\n    params.forEach(param => functionParamTabler(lineNum, param));\n    expressionBodyTabler(lineNum, body);\n};\n\n\n// eslint-disable-next-line complexity\nconst lineTabler = (lineNum, object) =>\n{\n    console.log(object);\n    const { type } = object;\n    switch(type){\n    case 'FunctionDeclaration':\n        functionTabler(lineNum, object); break;\n    case 'VariableDeclaration':\n        variableDeclaratorTabler(lineNum, object); break;\n    case 'ExpressionStatement':\n        expressionStatementTabler(object); break;\n    case 'WhileStatement':\n        whileStatementTabler(lineNum,object); break;\n    case 'IfStatement':\n        ifStatementTabler(lineNum,object); break;\n    case 'ReturnStatement':\n    default:\n    }\n};\n\nconst bodyTabler = (parsedCodeBody) => {\n    console.log(parsedCodeBody);\n    for(let i = 0 ; i < parsedCodeBody.length ; i++){\n        let lineNum  = ElementsTableModel.CurrentLineNum + 1;\n        lineTabler(lineNum,parsedCodeBody[i]);\n    }\n};\n\nexport const createElementTable = (parsedCode) => {\n    const { body } = parsedCode;\n    ElementsTableModel = new ElementsTable();\n    bodyTabler(body);\n    return ElementsTableModel;\n};\n\nexport const implementElementTableUI = () => {\n    ElementsTableUI.clean();\n    ElementsTableUI.createTable(ElementsTableModel);\n};"},{"filePath":"/Users/maorrozevich/Documents/sqhw1/src/js/model/AssignmentLine.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"/Users/maorrozevich/Documents/sqhw1/src/js/model/ElementsTable.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"/Users/maorrozevich/Documents/sqhw1/src/js/model/FunctionLine.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"/Users/maorrozevich/Documents/sqhw1/src/js/model/Line.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"/Users/maorrozevich/Documents/sqhw1/src/js/model/ParamLine.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"/Users/maorrozevich/Documents/sqhw1/src/js/model/VariableLine.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"/Users/maorrozevich/Documents/sqhw1/src/js/outputTable.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"/Users/maorrozevich/Documents/sqhw1/src/js/view/elementRowUI.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'$' is not defined.","line":17,"column":5,"nodeType":"Identifier","endLine":17,"endColumn":6},{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":17,"column":8,"nodeType":"ExpressionStatement","fix":{"range":[637,637],"text":";"}}],"errorCount":2,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"const toHtmlLineAttribute = (attribute) => {\n    const htmlLineAttribute = document.createElement('td');\n    htmlLineAttribute.setAttribute('align', 'center');\n    htmlLineAttribute.innerHTML = attribute;\n    return htmlLineAttribute;\n};\n\nconst rowToHtml = (row) => {\n    const htmlLineNum = toHtmlLineAttribute(row.lineNum);\n    const htmlLineType = toHtmlLineAttribute(row.lineType);\n    const htmlLineName = toHtmlLineAttribute(row.lineName);\n    const htmlLineValue = toHtmlLineAttribute(row.lineValue);\n    return ({ htmlLineNum,htmlLineType,htmlLineName, htmlLineValue });\n};\n\nexport const createHtmlElementRow = (row) => {\n    $()\n    const htmlRow = document.createElement('tr');\n    const { htmlLineNum,htmlLineType,htmlLineName, htmlLineValue } = rowToHtml(row);\n    htmlRow.append(htmlLineNum,htmlLineType,htmlLineName, htmlLineValue);\n    return htmlRow;\n};"},{"filePath":"/Users/maorrozevich/Documents/sqhw1/src/js/view/elementsTableUI.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0}]